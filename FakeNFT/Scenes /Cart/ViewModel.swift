import Foundation

//  –ü—Ä–æ—Ç–æ–∫–æ–ª ViewModel - —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
protocol CartViewModelProtocol: AnyObject {
    var onStateChanged: ((CartViewState) -> Void)? { get set }
    var onStateChangedWithIndex: ((CartViewState, Int) -> Void)? { get set }
    var onFooterUpdated: ((CartViewState) -> Void)? { get set }  //  –û—Ç–¥–µ–ª—å–Ω—ã–π callback –¥–ª—è footer
    var onError: ((String) -> Void)? { get set }
    var onShowDeleteConfirmation: ((String, URL?) -> Void)? { get set }
    var onGetSortedNfts: (([NFTCellState]) -> Void)? { get set }
    
    func viewDidLoad()
    func removeItemRequested(nftID: String)
    func confirmRemoveItem(nftID: String)
    func sortBy(_ type: SortType)
}

// MARK: - ViewModel

final class CartViewModel: CartViewModelProtocol {
   
    func sortBy(_ type: SortType) {
        switch type {
            
        case .price:
            nftCellStates.sort { cell1, cell2 in
                let price1 = cell1.nft?.price ?? 0.0
                let price2 = cell2.nft?.price ?? 0.0
                return price1 > price2
            }
            print(" –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ü–µ–Ω–µ")
            
        case .rating:
            nftCellStates.sort { cell1, cell2 in
                let rat1 = cell1.nft?.rating ?? 0
                let rat2 = cell2.nft?.rating ?? 0
                return rat1 > rat2
            }
            print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
            
        case .name:
            nftCellStates.sort { cell1, cell2 in
                let nam1 = cell1.nft?.name ?? ""
                let nam2 = cell2.nft?.name ?? ""
                //  –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                return nam1.localizedCaseInsensitiveCompare(nam2) == .orderedAscending
            }
            print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        }
        
        self.onGetSortedNfts?(nftCellStates)
    }
    
    
    // MARK: - Bindings (—Å–≤—è–∑–∏ —Å View)
    
    //  –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ closures - View –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    var onStateChanged: ((CartViewState) -> Void)?
    var onStateChangedWithIndex: ((CartViewState, Int) -> Void)?
    var onFooterUpdated: ((CartViewState) -> Void)?  //  –û—Ç–¥–µ–ª—å–Ω—ã–π callback –¥–ª—è footer
    var onError: ((String) -> Void)?
    var onShowDeleteConfirmation: ((String, URL?) -> Void)?
    var onGetSortedNfts: (([NFTCellState]) -> Void)?
    
    // MARK: - Properties
    
    private let servicesAssembly: ServicesAssembly
    
    //  —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
    private var nftCellStates: [NFTCellState] = []
    
    //  –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –≤–æ ViewModel
    private var doneLoading = false
    
    // MARK: - Init
    
    init(servicesAssembly: ServicesAssembly) {
        self.servicesAssembly = servicesAssembly
    }
    
    // MARK: - Public Methods (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è View)
    
    func viewDidLoad() {
        loadOrder()
    }
    
    // MARK: - Private Methods (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞)
    
    // —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private func updateViewState(changedIndex: Int? = nil) {
        let footerInfo = createFooterInfo()
        
        let state = CartViewState(
            cellStates: nftCellStates,
            doneLoading: doneLoading,
            footerInfo: footerInfo
        )
        
        DispatchQueue.main.async { [weak self] in
            if let changedIndex = changedIndex {
                //  –¢–û–ß–ï–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ onStateChangedWithIndex
                print("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —è—á–µ–π–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º \(changedIndex)")
                self?.onStateChangedWithIndex?(state, changedIndex)
            } else {
                //  –ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ onStateChanged
                print("üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: reloadData()")
                self?.onStateChanged?(state)
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ —è—á–µ–µ–∫ - –ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (reloadData)
    private func updateAllCellStates(_ newStates: [NFTCellState]) {
        nftCellStates = newStates
        updateViewState()  // changedIndex = nil ‚Üí –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }
    
    //  –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è footer –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private func createFooterInfo() -> CartViewState.FooterInfo? {
        guard doneLoading == true else { return nil }
        
        let loadedNFTs = nftCellStates.compactMap { $0.nft }
        let count = nftCellStates.count
        let totalPrice = loadedNFTs.reduce(0) { $0 + $1.price }
        let isPayButtonEnabled = !loadedNFTs.isEmpty
        
        return CartViewState.FooterInfo(
            count: count,
            totalPrice: totalPrice,
            isPayButtonEnabled: isPayButtonEnabled
        )
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    private func loadOrder() {
        servicesAssembly.nftService.loadOrder(id: "1") { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let order):
                    print("üì¶ Loaded order with \(order.nfts.count) NFTs")
                    self?.createSkeletonCells(for: order.nfts)
                    self?.loadNFTsData(ids: order.nfts)
                case .failure(let error):
                    self?.onError?("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: \(error.localizedDescription)")
                }
            }
        }
    }
    
    //  –°–æ–∑–¥–∞–µ–º skeleton —è—á–µ–π–∫–∏ - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –≤—ã–∑–æ–≤ reloadData()
    private func createSkeletonCells(for nftIDs: [String]) {
        let skeletonStates = nftIDs.map { NFTCellState.loading(id: $0) }
        updateAllCellStates(skeletonStates)  //  changedIndex = nil ‚Üí reloadData()
        print("üîÑ Created \(nftCellStates.count) skeleton cells - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô reloadData()")
    }
    
    //  –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π NFT –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    private func loadNFTsData(ids: [String]) {
        for (index, id) in ids.enumerated() {
            loadSingleNFT(id: id, at: index)
        }
    }
    
    //  –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω—É NFT –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É
    private func loadSingleNFT(id: String, at index: Int) {
        servicesAssembly.nftService.loadNftCartModel(id: id) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self, index < self.nftCellStates.count else { return }
                
                switch result {
                case .success(let nft):
                    // –¢–û–ß–ï–ß–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏
                    self.updateCellState(at: index, to: .loaded(nft: nft))
                    print(" Loaded NFT at index \(index): \(nft.name)")
                    
                case .failure(let error):
                    // –¢–û–ß–ï–ß–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏
                    self.updateCellState(at: index, to: .error(id: id, error: error))
                    print(" Failed to load NFT at index \(index): \(error)")
                }
                
                self.checkIfAllNFTsLoaded()
            }
        }
    }
    
    //  –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É - –¢–û–ß–ï–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (reloadRows)
    private func updateCellState(at index: Int, to newState: NFTCellState) {
        guard index < nftCellStates.count else { return }
        
        //  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É \(index): \(newState.id)")
        if case .loaded(let nft) = newState {
            print("üì∏ NFT –∑–∞–≥—Ä—É–∂–µ–Ω: \(nft.name), imageURL: \(nft.imageURL?.absoluteString ?? "nil")")
        }
        
        nftCellStates[index] = newState
        updateViewState(changedIndex: index)  //  changedIndex = index ‚Üí reloadRows
    }
    
    //  –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ NFT –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    private func checkIfAllNFTsLoaded() {
        let loadedCount = nftCellStates.filter { $0.isLoading == false }.count
        let totalCount = nftCellStates.count
        
        if loadedCount == totalCount && totalCount > 0 {
            doneLoading = true
            
            //  –æ—Ç–¥–µ–ª—å–Ω—ã–π callback —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è footer
            let footerInfo = createFooterInfo()
            
            let state = CartViewState(
                cellStates: nftCellStates,
                doneLoading: doneLoading,
                footerInfo: footerInfo
            )
            
            DispatchQueue.main.async { [weak self] in
                self?.onFooterUpdated?(state)  //  –¢–æ–ª—å–∫–æ footer, –Ω–∏–∫–∞–∫–∏—Ö reloadData()
            }
            
            print("üéâ All NFTs loaded! - —Ç–æ–ª—å–∫–æ footer –æ–±–Ω–æ–≤–ª–µ–Ω")
        }
    }
    
    // MARK: - –£–¥–∞–ª–µ–Ω–∏–µ nft
    
    //  View —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ —É–¥–∞–ª–∏—Ç—å, ViewModel —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å
    func removeItemRequested(nftID: String) {
        let imageURL = getNFTImageURL(for: nftID)
        onShowDeleteConfirmation?(nftID, imageURL)
    }
    
    //  View –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ, ViewModel –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
    func confirmRemoveItem(nftID: String) {
        removeItemByID(nftID: nftID)
    }
    
    //  –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è NFT
    private func removeItemByID(nftID: String) {
        let currentNftIds = nftCellStates.map { $0.id }
        let filteredNftIds = currentNftIds.filter { $0 != nftID }
        
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º NFT \(nftID)")
        print("üìã –ë—ã–ª–æ NFT: \(currentNftIds)")
        print("üìã –°—Ç–∞–ª–æ NFT: \(filteredNftIds)")
        
        //  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        servicesAssembly.nftService.changeOrPaytOrder(nftIds: filteredNftIds) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    print(" NFT \(nftID) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞")
                    //  –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    self?.removeItemFromState(nftID: nftID)
                    
                case .failure(let error):
                    print(" –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è NFT \(nftID): \(error)")
                    self?.onError?("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: \(error.localizedDescription)")
                }
            }
        }
    }
    
    //  –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
    private func removeItemFromState(nftID: String) {
        nftCellStates.removeAll { $0.id == nftID }
        updateViewState()  //  changedIndex = nil ‚Üí –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        print(" NFT —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    }
    
    //  –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π NFT
    private func getNFTImageURL(for nftID: String) -> URL? {
        guard let cellState = nftCellStates.first(where: { $0.id == nftID }) else {
            return nil
        }
        
        switch cellState {
        case .loaded(let nft):
            return nft.imageURL
        default:
            return nil
        }
    }
}
