import Foundation
import UIKit
import ProgressHUD

// ‚úÖ –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è View –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
struct CartViewState {
    let cellStates: [NFTCellState]
    let doneLoading: Bool
    let footerInfo: FooterInfo?
    
    struct FooterInfo {
        let count: Int
        let totalPrice: Double
        let isPayButtonEnabled: Bool
    }
    
    // ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    static var initial: CartViewState {
        return CartViewState(cellStates: [], doneLoading: false, footerInfo: nil)
    }
}

final class CartViewController: UIViewController {
    
    // MARK: - Properties
    
    private let servicesAssembly: ServicesAssembly
    private let viewModel: CartViewModelProtocol
    
    // ‚úÖ View —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private var currentState: CartViewState = .initial
    
    // MARK: - UI Elements (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
    
    private lazy var tableView: UITableView = {
        let table = UITableView()
        table.delegate = self
        table.dataSource = self
        table.register(CartTableViewCell.self, forCellReuseIdentifier: CartTableViewCell.identifier)
        table.separatorStyle = .none
        table.backgroundColor = .white
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()
    
    private lazy var footerView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor(named: "YP LightGrey")
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var nftCountLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 17, weight: .regular)
        label.textColor = .black
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var totalPriceLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 17, weight: .bold)
        label.textColor = .systemGreen
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var payButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–ö –æ–ø–ª–∞—Ç–µ", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 17, weight: .bold)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = .black
        button.layer.cornerRadius = 16
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(payButtonTapped), for: .touchUpInside)
        button.isEnabled = false
        button.alpha = 0.5
        return button
    }()
    
    private lazy var footerActivityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .medium)
        indicator.color = .black
        indicator.hidesWhenStopped = true
        indicator.translatesAutoresizingMaskIntoConstraints = false
        return indicator
    }()
    
    // MARK: - Init
    
    // ‚úÖ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º ViewModel —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ª—É—á—à–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
    init(servicesAssembly: ServicesAssembly, viewModel: CartViewModelProtocol) {
        self.servicesAssembly = servicesAssembly
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
        setupBindings() // ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupProgressHUD()
        ProgressHUD.show("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...")
        setupUI()
        updateFooter(currentState)
        
        // ‚úÖ –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º ViewModel —á—Ç–æ View –≥–æ—Ç–æ–≤–æ
        viewModel.viewDidLoad()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        ProgressHUD.dismiss()
    }
    
    // MARK: - Bindings Setup
    
    // ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ —Å ViewModel
    private func setupBindings() {
        // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        viewModel.onStateChanged = { [weak self] state in
            self?.updateState(state)
        }
        
        // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏
        viewModel.onError = { [weak self] message in
            self?.showError(message)
        }
        
        // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è
        viewModel.onShowDeleteConfirmation = { [weak self] nftID, imageURL in
            self?.showDeleteConfirmation(nftID: nftID, imageURL: imageURL)
        }
    }
    
    // MARK: - State Updates
    
    private func updateState(_ state: CartViewState) {
        
        
        currentState = state
        
        // üîÑ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        tableView.reloadData()
        
        // ü¶∂ –û–±–Ω–æ–≤–ª—è–µ–º footer –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateFooter(state)
        
        // ü´• –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        ProgressHUD.dismiss()
        
    }
    
    private func updateState(_ state: CartViewState, changedIndex: Int? = nil) {
         
         currentState = state
         
         // üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à—É—é—Å—è —è—á–µ–π–∫—É
         if let changedIndex = changedIndex,
            changedIndex < state.cellStates.count {
             
             print("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ \(changedIndex)")
             
             // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É
             let indexPath = IndexPath(row: changedIndex, section: 0)
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —è—á–µ–π–∫–∞ –≤–∏–¥–Ω–∞
             if tableView.indexPathsForVisibleRows?.contains(indexPath) == true {
                 tableView.reloadRows(at: [indexPath], with: .fade)
                 print("‚úÖ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —è—á–µ–π–∫–∞ \(changedIndex)")
             }
         } else {
             // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
             //tableView.reloadData()
             print("üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
         }
         
         updateFooter(state)
         ProgressHUD.dismiss()
     }
    

    
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º footer –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private func updateFooter(_ state: CartViewState) {
        if state.doneLoading == false {
            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º shimmer –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            showFooterShimmer()
            footerActivityIndicator.startAnimating()
            payButton.isEnabled = false
            payButton.alpha = 0.5
        } else if let footerInfo = state.footerInfo {
            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            hideFooterShimmer()
            footerActivityIndicator.stopAnimating()
            nftCountLabel.text = "\(footerInfo.count) NFT"
            totalPriceLabel.text = String(format: "%.2f ETH", footerInfo.totalPrice)
            payButton.isEnabled = footerInfo.isPayButtonEnabled
            payButton.alpha = footerInfo.isPayButtonEnabled ? 1.0 : 0.5
        }
    }
    
    // MARK: - Error Handling
    
    private func showError(_ message: String) {
        ProgressHUD.dismiss()
        let alert = UIAlertController(title: "–û—à–∏–±–∫–∞", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        present(alert, animated: true)
    }
    
    // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    private func showDeleteConfirmation(nftID: String, imageURL: URL?) {
        if imageURL == nil {
            showError("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
        }
        
        DeleteConfirmationViewController.present(
            from: self,
            nftID: nftID,
            nftImageURL: imageURL,
            onDelete: { [weak self] confirmedNFTID in
                print("üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ NFT: \(confirmedNFTID)")
                // ‚úÖ –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ViewModel
                self?.viewModel.confirmRemoveItem(nftID: confirmedNFTID)
            },
            onCancel: { cancelledNFTID in
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ NFT: \(cancelledNFTID)")
            }
        )
    }
    
    // MARK: - UI Setup (–º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
    
    private func setupProgressHUD() {
        ProgressHUD.animationType = .circleStrokeSpin
        ProgressHUD.colorAnimation = .black
    }
    
    private func setupUI() {
        view.backgroundColor = .white
        addSubviews()
        setupConstraints()
        setupNavigationBar()
    }
    
    private func setupNavigationBar() {
        navigationItem.title = ""
        
        let menuButton = UIButton(type: .system)
        menuButton.setImage(UIImage(named: "MenuButton"), for: .normal)
        menuButton.tintColor = .black
        menuButton.addTarget(self, action: #selector(menuButtonTapped), for: .touchUpInside)
        
        // ‚úÖ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        let containerView = UIView()
        containerView.addSubview(menuButton)
        
        menuButton.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            menuButton.topAnchor.constraint(equalTo: containerView.topAnchor, constant: 10),
            menuButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor),
            menuButton.leadingAnchor.constraint(equalTo: containerView.leadingAnchor, constant: 16), // –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
            menuButton.trailingAnchor.constraint(equalTo: containerView.trailingAnchor, constant: -20),
            containerView.widthAnchor.constraint(equalToConstant: 60), // —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            containerView.heightAnchor.constraint(equalToConstant: 44)
        ])
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: containerView)
    }
    
    private func addSubviews() {
        view.addSubview(footerView)
        view.addSubview(tableView)
        
        footerView.addSubview(nftCountLabel)
        footerView.addSubview(totalPriceLabel)
        footerView.addSubview(payButton)
        footerView.addSubview(footerActivityIndicator)
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Footer view
            footerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            footerView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            footerView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            footerView.heightAnchor.constraint(equalToConstant: 76),
            
            // TableView
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: footerView.topAnchor),
            
            // Footer elements
            nftCountLabel.topAnchor.constraint(equalTo: footerView.topAnchor, constant: 16),
            nftCountLabel.leadingAnchor.constraint(equalTo: footerView.leadingAnchor, constant: 16),
            nftCountLabel.widthAnchor.constraint(equalToConstant: 79),
            nftCountLabel.heightAnchor.constraint(equalToConstant: 20),
            
            totalPriceLabel.topAnchor.constraint(equalTo: nftCountLabel.bottomAnchor, constant: 4),
            totalPriceLabel.leadingAnchor.constraint(equalTo: footerView.leadingAnchor, constant: 16),
            totalPriceLabel.widthAnchor.constraint(lessThanOrEqualToConstant: 90),
            totalPriceLabel.heightAnchor.constraint(equalToConstant: 20),
            
            payButton.leadingAnchor.constraint(equalTo: totalPriceLabel.trailingAnchor, constant: 24),
            payButton.trailingAnchor.constraint(equalTo: footerView.trailingAnchor, constant: -16),
            payButton.centerYAnchor.constraint(equalTo: footerView.centerYAnchor),
            payButton.bottomAnchor.constraint(equalTo: footerView.bottomAnchor, constant: -16),
            payButton.widthAnchor.constraint(equalToConstant: 240),
            
            footerActivityIndicator.centerXAnchor.constraint(equalTo: nftCountLabel.centerXAnchor),
            footerActivityIndicator.centerYAnchor.constraint(equalTo: footerView.centerYAnchor),
        ])
    }
    
    // MARK: - Actions
    
    @objc private func menuButtonTapped() {
        print("Menu button tapped")
    }
    
    @objc private func payButtonTapped() {
        print("Pay button tapped")
    }
    
    // MARK: - Shimmer Animation (–º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
    
    private func showFooterShimmer() {
        view.layoutIfNeeded()
        addShimmerToLabel(nftCountLabel, width: 50)
        addShimmerToLabel(totalPriceLabel, width: 80)
        addPulseToPayButton()
    }
    
    private func hideFooterShimmer() {
        removeShimmerFromLabel(nftCountLabel)
        removeShimmerFromLabel(totalPriceLabel)
        removePulseFromPayButton()
    }
    
    private func addShimmerToLabel(_ label: UILabel, width: CGFloat) {
        label.text = ""
        label.backgroundColor = UIColor.systemGray5
        label.layer.cornerRadius = 8
        label.clipsToBounds = true
        label.layoutIfNeeded()
        
        let labelBounds = label.bounds.isEmpty ? CGRect(x: 0, y: 0, width: width, height: 20) : label.bounds
        
        let gradientLayer = CAGradientLayer()
        gradientLayer.colors = [
            UIColor.systemGray5.cgColor,
            UIColor.systemGray3.cgColor,
            UIColor.systemGray5.cgColor
        ]
        gradientLayer.locations = [0, 0.5, 1]
        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)
        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)
        gradientLayer.frame = labelBounds
        gradientLayer.cornerRadius = 8
        gradientLayer.name = "shimmerLayer"
        
        label.layer.insertSublayer(gradientLayer, at: 0)
        
        let animation = CABasicAnimation(keyPath: "locations")
        animation.fromValue = [-1.0, -0.5, 0.0]
        animation.toValue = [1.0, 1.5, 2.0]
        animation.duration = 1.5
        animation.repeatCount = .infinity
        animation.autoreverses = false
        animation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
        
        gradientLayer.add(animation, forKey: "shimmerAnimation")
    }
    
    private func removeShimmerFromLabel(_ label: UILabel) {
        label.backgroundColor = .clear
        label.layer.cornerRadius = 0
        label.clipsToBounds = false
        
        label.layer.sublayers?.removeAll { layer in
            layer.name == "shimmerLayer"
        }
    }
    
    private func addPulseToPayButton() {
        let pulseAnimation = CABasicAnimation(keyPath: "opacity")
        pulseAnimation.fromValue = 0.5
        pulseAnimation.toValue = 0.3
        pulseAnimation.duration = 1.0
        pulseAnimation.repeatCount = .infinity
        pulseAnimation.autoreverses = true
        pulseAnimation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
        
        payButton.layer.add(pulseAnimation, forKey: "pulseAnimation")
    }
    
    private func removePulseFromPayButton() {
        payButton.layer.removeAnimation(forKey: "pulseAnimation")
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        if !currentState.doneLoading {
            updateShimmerFrames()
        }
    }
    
    private func updateShimmerFrames() {
        updateShimmerFrame(for: nftCountLabel)
        updateShimmerFrame(for: totalPriceLabel)
    }
    
    private func updateShimmerFrame(for label: UILabel) {
        guard let shimmerLayer = label.layer.sublayers?.first(where: { $0.name == "shimmerLayer" }) else {
            return
        }
        shimmerLayer.frame = label.bounds
    }
}

// MARK: - UITableViewDataSource

extension CartViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º currentState –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        return currentState.cellStates.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CartTableViewCell.identifier, for: indexPath) as? CartTableViewCell else {
            return UITableViewCell()
        }
        
        // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏
        let cellState = currentState.cellStates[indexPath.row]
        cell.configure(with: cellState)
        
        // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ ViewModel
        cell.onRemove = { [weak self] nftID in
            guard let nftID = nftID else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nftID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            }
            
            print("üóëÔ∏è –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è NFT: \(nftID)")
            // ‚úÖ View –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ ViewModel
            self?.viewModel.removeItemRequested(nftID: nftID)
        }
        
        return cell
    }
}

// MARK: - UITableViewDelegate

extension CartViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 140
    }
}
